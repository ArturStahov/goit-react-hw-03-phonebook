{"version":3,"sources":["components/Section/StyledComponents.js","components/Section/Section.js","components/PhoneForm/StyledComponents.js","components/PhoneForm/PhoneForm.js","components/ContactList/StyledComponents.js","components/ContactList/ContactList.js","components/FilterContacts/StyledComponents.js","components/FilterContacts/FilterContacts.js","App.js","index.js"],"names":["Section","styled","section","Title","h2","SectionBlock","title","children","Form","form","FormLabel","label","Button","button","PhoneForm","state","nameValue","numberValue","handlerInput","e","target","name","value","setState","handlerFormSubmit","preventDefault","props","onAddContact","onSubmit","this","type","onChange","required","placeholder","minLength","maxLength","Component","TaskList","ul","TaskItem","li","TaskItemElements","p","ContactList","items","onDeleteContact","map","i","number","onClick","id","FilterBlock","div","Label","Input","input","FilterContacts","OnInputFilter","event","App","contacts","nameFilter","filterContactList","filter","item","toLowerCase","includes","addContact","some","error","text","delay","isMobilePhone","contact","uniqid","prevState","createContact","deleteContact","contactsFilterInput","inputValue","localStorage","getItem","JSON","parse","setItem","stringify","visibleContacts","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.8fbe07b2.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Section = styled.section`\n  padding: 20px 0px 20px;\n  max-width: 600px;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\nconst Title = styled.h2`\n  width: 100%;\n  text-align: center;\n  font-size: 1rem;\n  color: green;\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 20px;\n`;\nexport { Section, Title };\n","import React from 'react';\nimport { Section, Title } from './StyledComponents';\nimport PropTypes from 'prop-types';\n\nexport default function SectionBlock({ title, children }) {\n  return (\n    <Section>\n      <Title>{title}</Title>\n      {children}\n    </Section>\n  );\n}\n\nSectionBlock.propTypes = {\n  title: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nconst Form = styled.form`\n  max-width: 100%;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\nconst FormLabel = styled.label`\n  width: 85%;\n  margin-bottom: 10px;\n  display: flex;\n  justify-content: space-around;\n`;\nconst Button = styled.button`\n  padding: 5px 10px;\n  max-width: 250px;\n  height: 40px;\n  background-color: green;\n  border: none;\n  border-radius: 0.5rem;\n  cursor: pointer;\n`;\n\nexport { Form, FormLabel, Button };\n","import React, { Component } from 'react';\nimport { Form, FormLabel, Button } from './StyledComponents';\n\nexport default class PhoneForm extends Component {\n  state = {\n    nameValue: '',\n    numberValue: '',\n  };\n\n  handlerInput = e => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handlerFormSubmit = e => {\n    const { nameValue, numberValue } = this.state;\n    e.preventDefault();\n    this.props.onAddContact(nameValue, numberValue);\n    this.setState({\n      nameValue: '',\n      numberValue: '',\n    });\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.handlerFormSubmit}>\n        <FormLabel>\n          Name:\n          <input\n            type=\"text\"\n            name=\"nameValue\"\n            onChange={this.handlerInput}\n            value={this.state.nameValue}\n            required\n          />\n        </FormLabel>\n        <FormLabel>\n          Phone:\n          <input\n            type=\"text\"\n            name=\"numberValue\"\n            onChange={this.handlerInput}\n            value={this.state.numberValue}\n            placeholder=\"+3(___)___-__-__\"\n            minLength=\"13\"\n            maxLength=\"13\"\n            required\n          />\n        </FormLabel>\n        <Button type=\"submit\">Add Contact</Button>\n      </Form>\n    );\n  }\n}\n","import styled from 'styled-components';\n\nconst TaskList = styled.ul`\n  max-width: 700px;\n  margin: 0 auto;\n`;\nconst TaskItem = styled.li`\n  padding: 10px 10px 10px 10px;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  background-color: grey;\n  border: 2px solid black;\n  border-radius: 0.5rem;\n  margin-bottom: 10px;\n  box-shadow: 10px 5px 5px grey;\n`;\nconst TaskItemElements = styled.p`\n  &:not(:last-child) {\n    margin-right: 10px;\n  }\n`;\nconst Button = styled.button`\n  padding: 5px 10px;\n  max-width: 200px;\n  height: 30px;\n  background-color: goldenrod;\n  border: none;\n  border-radius: 0.5rem;\n  font-size: 0.8rem;\n  color: #fff;\n  text-transform: uppercase;\n  cursor: pointer;\n`;\nexport { TaskList, TaskItem, TaskItemElements, Button };\n","import React from 'react';\nimport {\n  TaskList,\n  TaskItem,\n  TaskItemElements,\n  Button,\n} from './StyledComponents';\nimport PropTypes from 'prop-types';\n\nexport default function ContactList({ items, onDeleteContact }) {\n  return (\n    <TaskList>\n      {items.map(i => (\n        <TaskItem key={i.id}>\n          <TaskItemElements>{i.name} :</TaskItemElements>\n          <TaskItemElements>{i.number}</TaskItemElements>\n          <Button type=\"button\" onClick={() => onDeleteContact(i.id)}>\n            Delete\n          </Button>\n        </TaskItem>\n      ))}\n    </TaskList>\n  );\n}\n\nContactList.propTypes = {\n  items: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nconst FilterBlock = styled.div`\n  width: 100%;\n  padding-bottom: 20px;\n`;\nconst Label = styled.label`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\nconst Title = styled.p`\n  width: 100%;\n  text-align: center;\n  margin-bottom: 5px;\n`;\nconst Input = styled.input`\n  width: 50%;\n`;\n\nexport { FilterBlock, Label, Title, Input };\n","import React from 'react';\nimport { FilterBlock, Label, Title, Input } from './StyledComponents';\nimport PropTypes from 'prop-types';\n\nexport default function FilterContacts({ value, OnInputFilter }) {\n  return (\n    <FilterBlock>\n      <Label>\n        <Title>Find Contacts by name</Title>\n        <Input\n          type=\"text\"\n          value={value}\n          onChange={event => OnInputFilter(event.target.value)}\n        />\n      </Label>\n    </FilterBlock>\n  );\n}\n\nFilterContacts.propTypes = {\n  OnInputFilter: PropTypes.func,\n  value: PropTypes.string,\n};\n","import React, { Component } from 'react';\nimport uniqid from 'uniqid';\nimport SectionBlock from './components/Section/Section';\nimport PhoneForm from './components/PhoneForm/PhoneForm';\nimport ContactsList from './components/ContactList/ContactList';\nimport FilterContacts from './components/FilterContacts/FilterContacts';\nimport { error } from '@pnotify/core';\nimport '@pnotify/core/dist/PNotify.css';\nimport '@pnotify/core/dist/BrightTheme.css';\nimport '@pnotify/confirm/dist/PNotifyConfirm.css';\nimport isMobilePhone from 'validator/es/lib/isMobilePhone';\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    nameFilter: '',\n  };\n\n  componentDidMount() {\n    if (localStorage.getItem('saveContacts')) {\n      this.setState({\n        contacts: JSON.parse(localStorage.getItem('saveContacts')),\n      });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('saveContacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  filterContactList = () => {\n    return this.state.contacts.filter(item =>\n      item.name.toLowerCase().includes(this.state.nameFilter.toLowerCase()),\n    );\n  };\n\n  addContact = (name, number) => {\n    let isContactPresent = this.state.contacts.some(item =>\n      item.name.toLowerCase().includes(name.toLowerCase()),\n    );\n\n    const createContact = () => {\n      const contact = {\n        name,\n        number,\n        id: uniqid(),\n      };\n      this.setState(prevState => {\n        return {\n          contacts: [...prevState.contacts, contact],\n        };\n      });\n    };\n\n    const errorBadValueNumber = () => {\n      return error({\n        title: 'Hi!',\n        text:\n          'BAD value phone-number!!! You must enter phone-number correct format',\n        delay: 3000,\n      });\n    };\n\n    const errorContactPresent = () => {\n      return error({\n        title: 'Hi!',\n        text: 'This contact is present in phone-book!',\n        delay: 3000,\n      });\n    };\n\n    if (!isContactPresent) {\n      isMobilePhone(number) ? createContact() : errorBadValueNumber();\n    } else {\n      errorContactPresent();\n    }\n  };\n\n  deleteContact = id => {\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(e => e.id !== id),\n      };\n    });\n  };\n  contactsFilterInput = inputValue => {\n    this.setState({\n      nameFilter: inputValue,\n    });\n  };\n\n  render() {\n    const { nameFilter } = this.state;\n    const visibleContacts = this.filterContactList();\n    return (\n      <>\n        <SectionBlock title=\"Phone-book\">\n          <PhoneForm onAddContact={this.addContact} />\n        </SectionBlock>\n        <SectionBlock title=\"Contacts\">\n          <FilterContacts\n            value={nameFilter}\n            OnInputFilter={this.contactsFilterInput}\n          />\n          <ContactsList\n            items={visibleContacts}\n            onDeleteContact={this.deleteContact}\n          />\n        </SectionBlock>\n      </>\n    );\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './normalize.css'\r\nimport './base.css'\r\nimport App from './App';\r\n\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'))"],"sourceRoot":""}